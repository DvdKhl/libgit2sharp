git_annotated_commit_free void git_annotated_commit_free(git_annotated_commit *commit)
git_annotated_commit_from_fetchhead int git_annotated_commit_from_fetchhead(git_annotated_commit **out, git_repository *repo, const char *branch_name, const char *remote_url, const git_oid *id)
git_annotated_commit_from_ref int git_annotated_commit_from_ref(git_annotated_commit **out, git_repository *repo, const git_reference *ref)
git_annotated_commit_from_revspec int git_annotated_commit_from_revspec(git_annotated_commit **out, git_repository *repo, const char *revspec)
git_annotated_commit_id const git_oid * git_annotated_commit_id(const git_annotated_commit *commit)
git_annotated_commit_lookup int git_annotated_commit_lookup(git_annotated_commit **out, git_repository *repo, const git_oid *id)
git_annotated_commit_ref const char * git_annotated_commit_ref(const git_annotated_commit *commit)
git_apply int git_apply(git_repository *repo, git_diff *diff, git_apply_location_t location, const git_apply_options *options)
git_apply_options_init int git_apply_options_init(git_apply_options *opts, unsigned int version)
git_apply_to_tree int git_apply_to_tree(git_index **out, git_repository *repo, git_tree *preimage, git_diff *diff, const git_apply_options *options)
git_attr_add_macro int git_attr_add_macro(git_repository *repo, const char *name, const char *values)
git_attr_cache_flush int git_attr_cache_flush(git_repository *repo)
git_attr_foreach int git_attr_foreach(git_repository *repo, uint32_t flags, const char *path, git_attr_foreach_cb callback, void *payload)
git_attr_get int git_attr_get(const char **value_out, git_repository *repo, uint32_t flags, const char *path, const char *name)
git_attr_get_many int git_attr_get_many(const char **values_out, git_repository *repo, uint32_t flags, const char *path, size_t num_attr, const char **names)
git_attr_value git_attr_value_t git_attr_value(const char *attr)
git_blame_buffer int git_blame_buffer(git_blame **out, git_blame *reference, const char *buffer, size_t buffer_len)
git_blame_file int git_blame_file(git_blame **out, git_repository *repo, const char *path, git_blame_options *options)
git_blame_free void git_blame_free(git_blame *blame)
git_blame_get_hunk_byindex const git_blame_hunk* git_blame_get_hunk_byindex(git_blame *blame, uint32_t index)
git_blame_get_hunk_byline const git_blame_hunk* git_blame_get_hunk_byline(git_blame *blame, size_t lineno)
git_blame_get_hunk_count uint32_t git_blame_get_hunk_count(git_blame *blame)
git_blame_init_options int git_blame_init_options(git_blame_options *opts, unsigned int version)
git_blame_options_init int git_blame_options_init(git_blame_options *opts, unsigned int version)
git_blob_create_from_buffer int git_blob_create_from_buffer(git_oid *id, git_repository *repo, const void *buffer, size_t len)
git_blob_create_from_disk int git_blob_create_from_disk(git_oid *id, git_repository *repo, const char *path)
git_blob_create_from_stream int git_blob_create_from_stream(git_writestream **out, git_repository *repo, const char *hintpath)
git_blob_create_from_stream_commit int git_blob_create_from_stream_commit(git_oid *out, git_writestream *stream)
git_blob_create_from_workdir int git_blob_create_from_workdir(git_oid *id, git_repository *repo, const char *relative_path)
git_blob_create_frombuffer int git_blob_create_frombuffer(git_oid *id, git_repository *repo, const void *buffer, size_t len)
git_blob_create_fromdisk int git_blob_create_fromdisk(git_oid *id, git_repository *repo, const char *path)
git_blob_create_fromstream int git_blob_create_fromstream(git_writestream **out, git_repository *repo, const char *hintpath)
git_blob_create_fromstream_commit int git_blob_create_fromstream_commit(git_oid *out, git_writestream *stream)
git_blob_create_fromworkdir int git_blob_create_fromworkdir(git_oid *id, git_repository *repo, const char *relative_path)
git_blob_dup int git_blob_dup(git_blob **out, git_blob *source)
git_blob_filter int git_blob_filter(git_buf *out, git_blob *blob, const char *as_path, git_blob_filter_options *opts)
git_blob_filtered_content int git_blob_filtered_content(git_buf *out, git_blob *blob, const char *as_path, int check_for_binary_data)
git_blob_free void git_blob_free(git_blob *blob)
git_blob_id const git_oid * git_blob_id(const git_blob *blob)
git_blob_is_binary int git_blob_is_binary(const git_blob *blob)
git_blob_lookup int git_blob_lookup(git_blob **blob, git_repository *repo, const git_oid *id)
git_blob_lookup_prefix int git_blob_lookup_prefix(git_blob **blob, git_repository *repo, const git_oid *id, size_t len)
git_blob_owner git_repository * git_blob_owner(const git_blob *blob)
git_blob_rawcontent const void * git_blob_rawcontent(const git_blob *blob)
git_blob_rawsize git_object_size_t git_blob_rawsize(const git_blob *blob)
git_branch_create int git_branch_create(git_reference **out, git_repository *repo, const char *branch_name, const git_commit *target, int force)
git_branch_create_from_annotated int git_branch_create_from_annotated(git_reference **ref_out, git_repository *repository, const char *branch_name, const git_annotated_commit *commit, int force)
git_branch_delete int git_branch_delete(git_reference *branch)
git_branch_is_checked_out int git_branch_is_checked_out(const git_reference *branch)
git_branch_is_head int git_branch_is_head(const git_reference *branch)
git_branch_iterator_free void git_branch_iterator_free(git_branch_iterator *iter)
git_branch_iterator_new int git_branch_iterator_new(git_branch_iterator **out, git_repository *repo, git_branch_t list_flags)
git_branch_lookup int git_branch_lookup(git_reference **out, git_repository *repo, const char *branch_name, git_branch_t branch_type)
git_branch_move int git_branch_move(git_reference **out, git_reference *branch, const char *new_branch_name, int force)
git_branch_name int git_branch_name(const char **out, const git_reference *ref)
git_branch_next int git_branch_next(git_reference **out, git_branch_t *out_type, git_branch_iterator *iter)
git_branch_remote_name int git_branch_remote_name(git_buf *out, git_repository *repo, const char *refname)
git_branch_set_upstream int git_branch_set_upstream(git_reference *branch, const char *branch_name)
git_branch_upstream int git_branch_upstream(git_reference **out, const git_reference *branch)
git_branch_upstream_name int git_branch_upstream_name(git_buf *out, git_repository *repo, const char *refname)
git_branch_upstream_remote int git_branch_upstream_remote(git_buf *buf, git_repository *repo, const char *refname)
git_buf_contains_nul int git_buf_contains_nul(const git_buf *buf)
git_buf_dispose void git_buf_dispose(git_buf *buffer)
git_buf_free void git_buf_free(git_buf *buffer)
git_buf_grow int git_buf_grow(git_buf *buffer, size_t target_size)
git_buf_is_binary int git_buf_is_binary(const git_buf *buf)
git_buf_set int git_buf_set(git_buf *buffer, const void *data, size_t datalen)
git_checkout_head int git_checkout_head(git_repository *repo, const git_checkout_options *opts)
git_checkout_index int git_checkout_index(git_repository *repo, git_index *index, const git_checkout_options *opts)
git_checkout_init_options int git_checkout_init_options(git_checkout_options *opts, unsigned int version)
git_checkout_options_init int git_checkout_options_init(git_checkout_options *opts, unsigned int version)
git_checkout_tree int git_checkout_tree(git_repository *repo, const git_object *treeish, const git_checkout_options *opts)
git_cherrypick int git_cherrypick(git_repository *repo, git_commit *commit, const git_cherrypick_options *cherrypick_options)
git_cherrypick_commit int git_cherrypick_commit(git_index **out, git_repository *repo, git_commit *cherrypick_commit, git_commit *our_commit, unsigned int mainline, const git_merge_options *merge_options)
git_cherrypick_init_options int git_cherrypick_init_options(git_cherrypick_options *opts, unsigned int version)
git_cherrypick_options_init int git_cherrypick_options_init(git_cherrypick_options *opts, unsigned int version)
git_clone int git_clone(git_repository **out, const char *url, const char *local_path, const git_clone_options *options)
git_clone_init_options int git_clone_init_options(git_clone_options *opts, unsigned int version)
git_clone_options_init int git_clone_options_init(git_clone_options *opts, unsigned int version)
git_commit_amend int git_commit_amend(git_oid *id, const git_commit *commit_to_amend, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_tree *tree)
git_commit_author const git_signature * git_commit_author(const git_commit *commit)
git_commit_author_with_mailmap int git_commit_author_with_mailmap(git_signature **out, const git_commit *commit, const git_mailmap *mailmap)
git_commit_body const char * git_commit_body(git_commit *commit)
git_commit_committer const git_signature * git_commit_committer(const git_commit *commit)
git_commit_committer_with_mailmap int git_commit_committer_with_mailmap(git_signature **out, const git_commit *commit, const git_mailmap *mailmap)
git_commit_create int git_commit_create(git_oid *id, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_tree *tree, size_t parent_count, const git_commit *parents[])
git_commit_create_buffer int git_commit_create_buffer(git_buf *out, git_repository *repo, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_tree *tree, size_t parent_count, const git_commit *parents[])
git_commit_create_from_callback int git_commit_create_from_callback(git_oid *id, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_oid *tree, git_commit_parent_callback parent_cb, void *parent_payload)
git_commit_create_from_ids int git_commit_create_from_ids(git_oid *id, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_oid *tree, size_t parent_count, const git_oid *parents[])
git_commit_create_v int git_commit_create_v(git_oid *id, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_tree *tree, size_t parent_count, ...)
git_commit_create_with_signature int git_commit_create_with_signature(git_oid *out, git_repository *repo, const char *commit_content, const char *signature, const char *signature_field)
git_commit_dup int git_commit_dup(git_commit **out, git_commit *source)
git_commit_extract_signature int git_commit_extract_signature(git_buf *signature, git_buf *signed_data, git_repository *repo, git_oid *commit_id, const char *field)
git_commit_free void git_commit_free(git_commit *commit)
git_commit_header_field int git_commit_header_field(git_buf *out, const git_commit *commit, const char *field)
git_commit_id const git_oid * git_commit_id(const git_commit *commit)
git_commit_lookup int git_commit_lookup(git_commit **commit, git_repository *repo, const git_oid *id)
git_commit_lookup_prefix int git_commit_lookup_prefix(git_commit **commit, git_repository *repo, const git_oid *id, size_t len)
git_commit_message const char * git_commit_message(const git_commit *commit)
git_commit_message_encoding const char * git_commit_message_encoding(const git_commit *commit)
git_commit_message_raw const char * git_commit_message_raw(const git_commit *commit)
git_commit_nth_gen_ancestor int git_commit_nth_gen_ancestor(git_commit **ancestor, const git_commit *commit, unsigned int n)
git_commit_owner git_repository * git_commit_owner(const git_commit *commit)
git_commit_parent int git_commit_parent(git_commit **out, const git_commit *commit, unsigned int n)
git_commit_parent_id const git_oid * git_commit_parent_id(const git_commit *commit, unsigned int n)
git_commit_parentcount unsigned int git_commit_parentcount(const git_commit *commit)
git_commit_raw_header const char * git_commit_raw_header(const git_commit *commit)
git_commit_summary const char * git_commit_summary(git_commit *commit)
git_commit_time git_time_t git_commit_time(const git_commit *commit)
git_commit_time_offset int git_commit_time_offset(const git_commit *commit)
git_commit_tree int git_commit_tree(git_tree **tree_out, const git_commit *commit)
git_commit_tree_id const git_oid * git_commit_tree_id(const git_commit *commit)
git_config_add_backend int git_config_add_backend(git_config *cfg, git_config_backend *file, git_config_level_t level, const git_repository *repo, int force)
git_config_add_file_ondisk int git_config_add_file_ondisk(git_config *cfg, const char *path, git_config_level_t level, const git_repository *repo, int force)
git_config_backend_foreach_match int git_config_backend_foreach_match(git_config_backend *backend, const char *regexp, git_config_foreach_cb callback, void *payload)
git_config_delete_entry int git_config_delete_entry(git_config *cfg, const char *name)
git_config_delete_multivar int git_config_delete_multivar(git_config *cfg, const char *name, const char *regexp)
git_config_entry_free void git_config_entry_free(git_config_entry *)
git_config_find_global int git_config_find_global(git_buf *out)
git_config_find_programdata int git_config_find_programdata(git_buf *out)
git_config_find_system int git_config_find_system(git_buf *out)
git_config_find_xdg int git_config_find_xdg(git_buf *out)
git_config_foreach int git_config_foreach(const git_config *cfg, git_config_foreach_cb callback, void *payload)
git_config_foreach_match int git_config_foreach_match(const git_config *cfg, const char *regexp, git_config_foreach_cb callback, void *payload)
git_config_free void git_config_free(git_config *cfg)
git_config_get_bool int git_config_get_bool(int *out, const git_config *cfg, const char *name)
git_config_get_entry int git_config_get_entry(git_config_entry **out, const git_config *cfg, const char *name)
git_config_get_int32 int git_config_get_int32(int32_t *out, const git_config *cfg, const char *name)
git_config_get_int64 int git_config_get_int64(int64_t *out, const git_config *cfg, const char *name)
git_config_get_mapped int git_config_get_mapped(int *out, const git_config *cfg, const char *name, const git_configmap *maps, size_t map_n)
git_config_get_multivar_foreach int git_config_get_multivar_foreach(const git_config *cfg, const char *name, const char *regexp, git_config_foreach_cb callback, void *payload)
git_config_get_path int git_config_get_path(git_buf *out, const git_config *cfg, const char *name)
git_config_get_string int git_config_get_string(const char **out, const git_config *cfg, const char *name)
git_config_get_string_buf int git_config_get_string_buf(git_buf *out, const git_config *cfg, const char *name)
git_config_init_backend int git_config_init_backend(git_config_backend *backend, unsigned int version)
git_config_iterator_free void git_config_iterator_free(git_config_iterator *iter)
git_config_iterator_glob_new int git_config_iterator_glob_new(git_config_iterator **out, const git_config *cfg, const char *regexp)
git_config_iterator_new int git_config_iterator_new(git_config_iterator **out, const git_config *cfg)
git_config_lock int git_config_lock(git_transaction **tx, git_config *cfg)
git_config_lookup_map_value int git_config_lookup_map_value(int *out, const git_configmap *maps, size_t map_n, const char *value)
git_config_multivar_iterator_new int git_config_multivar_iterator_new(git_config_iterator **out, const git_config *cfg, const char *name, const char *regexp)
git_config_new int git_config_new(git_config **out)
git_config_next int git_config_next(git_config_entry **entry, git_config_iterator *iter)
git_config_open_default int git_config_open_default(git_config **out)
git_config_open_global int git_config_open_global(git_config **out, git_config *config)
git_config_open_level int git_config_open_level(git_config **out, const git_config *parent, git_config_level_t level)
git_config_open_ondisk int git_config_open_ondisk(git_config **out, const char *path)
git_config_parse_bool int git_config_parse_bool(int *out, const char *value)
git_config_parse_int32 int git_config_parse_int32(int32_t *out, const char *value)
git_config_parse_int64 int git_config_parse_int64(int64_t *out, const char *value)
git_config_parse_path int git_config_parse_path(git_buf *out, const char *value)
git_config_set_bool int git_config_set_bool(git_config *cfg, const char *name, int value)
git_config_set_int32 int git_config_set_int32(git_config *cfg, const char *name, int32_t value)
git_config_set_int64 int git_config_set_int64(git_config *cfg, const char *name, int64_t value)
git_config_set_multivar int git_config_set_multivar(git_config *cfg, const char *name, const char *regexp, const char *value)
git_config_set_string int git_config_set_string(git_config *cfg, const char *name, const char *value)
git_config_snapshot int git_config_snapshot(git_config **out, git_config *config)
git_config_unlock int git_config_unlock(git_config *cfg, int commit)
git_cred_default_new int git_cred_default_new(git_credential **out)
git_cred_free void git_cred_free(git_credential *cred)
git_cred_get_username const char * git_cred_get_username(git_credential *cred)
git_cred_has_username int git_cred_has_username(git_credential *cred)
git_cred_ssh_custom_new int git_cred_ssh_custom_new(git_credential **out, const char *username, const char *publickey, size_t publickey_len, git_credential_sign_cb sign_callback, void *payload)
git_cred_ssh_interactive_new int git_cred_ssh_interactive_new(git_credential **out, const char *username, git_credential_ssh_interactive_cb prompt_callback, void *payload)
git_cred_ssh_key_from_agent int git_cred_ssh_key_from_agent(git_credential **out, const char *username)
git_cred_ssh_key_memory_new int git_cred_ssh_key_memory_new(git_credential **out, const char *username, const char *publickey, const char *privatekey, const char *passphrase)
git_cred_ssh_key_new int git_cred_ssh_key_new(git_credential **out, const char *username, const char *publickey, const char *privatekey, const char *passphrase)
git_cred_username_new int git_cred_username_new(git_credential **out, const char *username)
git_cred_userpass int git_cred_userpass(git_credential **out, const char *url, const char *user_from_url, unsigned int allowed_types, void *payload)
git_cred_userpass_plaintext_new int git_cred_userpass_plaintext_new(git_credential **out, const char *username, const char *password)
git_credential_default_new int git_credential_default_new(git_credential **out)
git_credential_free void git_credential_free(git_credential *cred)
git_credential_get_username const char * git_credential_get_username(git_credential *cred)
git_credential_has_username int git_credential_has_username(git_credential *cred)
git_credential_ssh_custom_new int git_credential_ssh_custom_new(git_credential **out, const char *username, const char *publickey, size_t publickey_len, git_credential_sign_cb sign_callback, void *payload)
git_credential_ssh_interactive_new int git_credential_ssh_interactive_new(git_credential **out, const char *username, git_credential_ssh_interactive_cb prompt_callback, void *payload)
git_credential_ssh_key_from_agent int git_credential_ssh_key_from_agent(git_credential **out, const char *username)
git_credential_ssh_key_memory_new int git_credential_ssh_key_memory_new(git_credential **out, const char *username, const char *publickey, const char *privatekey, const char *passphrase)
git_credential_ssh_key_new int git_credential_ssh_key_new(git_credential **out, const char *username, const char *publickey, const char *privatekey, const char *passphrase)
git_credential_username_new int git_credential_username_new(git_credential **out, const char *username)
git_credential_userpass int git_credential_userpass(git_credential **out, const char *url, const char *user_from_url, unsigned int allowed_types, void *payload)
git_credential_userpass_plaintext_new int git_credential_userpass_plaintext_new(git_credential **out, const char *username, const char *password)
git_describe_commit int git_describe_commit(git_describe_result **result, git_object *committish, git_describe_options *opts)
git_describe_format int git_describe_format(git_buf *out, const git_describe_result *result, const git_describe_format_options *opts)
git_describe_format_options_init int git_describe_format_options_init(git_describe_format_options *opts, unsigned int version)
git_describe_init_format_options int git_describe_init_format_options(git_describe_format_options *opts, unsigned int version)
git_describe_init_options int git_describe_init_options(git_describe_options *opts, unsigned int version)
git_describe_options_init int git_describe_options_init(git_describe_options *opts, unsigned int version)
git_describe_result_free void git_describe_result_free(git_describe_result *result)
git_describe_workdir int git_describe_workdir(git_describe_result **out, git_repository *repo, git_describe_options *opts)
git_diff_blob_to_buffer int git_diff_blob_to_buffer(const git_blob *old_blob, const char *old_as_path, const char *buffer, size_t buffer_len, const char *buffer_as_path, const git_diff_options *options, git_diff_file_cb file_cb, git_diff_binary_cb binary_cb, git_diff_hunk_cb hunk_cb, git_diff_line_cb line_cb, void *payload)
git_diff_blobs int git_diff_blobs(const git_blob *old_blob, const char *old_as_path, const git_blob *new_blob, const char *new_as_path, const git_diff_options *options, git_diff_file_cb file_cb, git_diff_binary_cb binary_cb, git_diff_hunk_cb hunk_cb, git_diff_line_cb line_cb, void *payload)
git_diff_buffers int git_diff_buffers(const void *old_buffer, size_t old_len, const char *old_as_path, const void *new_buffer, size_t new_len, const char *new_as_path, const git_diff_options *options, git_diff_file_cb file_cb, git_diff_binary_cb binary_cb, git_diff_hunk_cb hunk_cb, git_diff_line_cb line_cb, void *payload)
git_diff_commit_as_email int git_diff_commit_as_email(git_buf *out, git_repository *repo, git_commit *commit, size_t patch_no, size_t total_patches, uint32_t flags, const git_diff_options *diff_opts)
git_diff_find_init_options int git_diff_find_init_options(git_diff_find_options *opts, unsigned int version)
git_diff_find_options_init int git_diff_find_options_init(git_diff_find_options *opts, unsigned int version)
git_diff_find_similar int git_diff_find_similar(git_diff *diff, const git_diff_find_options *options)
git_diff_foreach int git_diff_foreach(git_diff *diff, git_diff_file_cb file_cb, git_diff_binary_cb binary_cb, git_diff_hunk_cb hunk_cb, git_diff_line_cb line_cb, void *payload)
git_diff_format_email int git_diff_format_email(git_buf *out, git_diff *diff, const git_diff_format_email_options *opts)
git_diff_format_email_init_options int git_diff_format_email_init_options(git_diff_format_email_options *opts, unsigned int version)
git_diff_format_email_options_init int git_diff_format_email_options_init(git_diff_format_email_options *opts, unsigned int version)
git_diff_free void git_diff_free(git_diff *diff)
git_diff_from_buffer int git_diff_from_buffer(git_diff **out, const char *content, size_t content_len)
git_diff_get_delta const git_diff_delta * git_diff_get_delta(const git_diff *diff, size_t idx)
git_diff_get_perfdata int git_diff_get_perfdata(git_diff_perfdata *out, const git_diff *diff)
git_diff_get_stats int git_diff_get_stats(git_diff_stats **out, git_diff *diff)
git_diff_index_to_index int git_diff_index_to_index(git_diff **diff, git_repository *repo, git_index *old_index, git_index *new_index, const git_diff_options *opts)
git_diff_index_to_workdir int git_diff_index_to_workdir(git_diff **diff, git_repository *repo, git_index *index, const git_diff_options *opts)
git_diff_init_options int git_diff_init_options(git_diff_options *opts, unsigned int version)
git_diff_is_sorted_icase int git_diff_is_sorted_icase(const git_diff *diff)
git_diff_merge int git_diff_merge(git_diff *onto, const git_diff *from)
git_diff_num_deltas size_t git_diff_num_deltas(const git_diff *diff)
git_diff_num_deltas_of_type size_t git_diff_num_deltas_of_type(const git_diff *diff, git_delta_t type)
git_diff_options_init int git_diff_options_init(git_diff_options *opts, unsigned int version)
git_diff_patchid int git_diff_patchid(git_oid *out, git_diff *diff, git_diff_patchid_options *opts)
git_diff_patchid_init_options int git_diff_patchid_init_options(git_diff_patchid_options *opts, unsigned int version)
git_diff_patchid_options_init int git_diff_patchid_options_init(git_diff_patchid_options *opts, unsigned int version)
git_diff_print int git_diff_print(git_diff *diff, git_diff_format_t format, git_diff_line_cb print_cb, void *payload)
git_diff_print_callback__to_buf int git_diff_print_callback__to_buf(const git_diff_delta *delta, const git_diff_hunk *hunk, const git_diff_line *line, void *payload)
git_diff_print_callback__to_file_handle int git_diff_print_callback__to_file_handle(const git_diff_delta *delta, const git_diff_hunk *hunk, const git_diff_line *line, void *payload)
git_diff_stats_deletions size_t git_diff_stats_deletions(const git_diff_stats *stats)
git_diff_stats_files_changed size_t git_diff_stats_files_changed(const git_diff_stats *stats)
git_diff_stats_free void git_diff_stats_free(git_diff_stats *stats)
git_diff_stats_insertions size_t git_diff_stats_insertions(const git_diff_stats *stats)
git_diff_stats_to_buf int git_diff_stats_to_buf(git_buf *out, const git_diff_stats *stats, git_diff_stats_format_t format, size_t width)
git_diff_status_char char git_diff_status_char(git_delta_t status)
git_diff_to_buf int git_diff_to_buf(git_buf *out, git_diff *diff, git_diff_format_t format)
git_diff_tree_to_index int git_diff_tree_to_index(git_diff **diff, git_repository *repo, git_tree *old_tree, git_index *index, const git_diff_options *opts)
git_diff_tree_to_tree int git_diff_tree_to_tree(git_diff **diff, git_repository *repo, git_tree *old_tree, git_tree *new_tree, const git_diff_options *opts)
git_diff_tree_to_workdir int git_diff_tree_to_workdir(git_diff **diff, git_repository *repo, git_tree *old_tree, const git_diff_options *opts)
git_diff_tree_to_workdir_with_index int git_diff_tree_to_workdir_with_index(git_diff **diff, git_repository *repo, git_tree *old_tree, const git_diff_options *opts)
git_error_clear void git_error_clear(void)
git_error_last const git_error * git_error_last(void)
git_error_set_oom void git_error_set_oom(void)
git_error_set_str int git_error_set_str(int error_class, const char *string)
git_fetch_init_options int git_fetch_init_options(git_fetch_options *opts, unsigned int version)
git_fetch_options_init int git_fetch_options_init(git_fetch_options *opts, unsigned int version)
git_filter_init int git_filter_init(git_filter *filter, unsigned int version)
git_filter_list_apply_to_blob int git_filter_list_apply_to_blob(git_buf *out, git_filter_list *filters, git_blob *blob)
git_filter_list_apply_to_data int git_filter_list_apply_to_data(git_buf *out, git_filter_list *filters, git_buf *in)
git_filter_list_apply_to_file int git_filter_list_apply_to_file(git_buf *out, git_filter_list *filters, git_repository *repo, const char *path)
git_filter_list_contains int git_filter_list_contains(git_filter_list *filters, const char *name)
git_filter_list_free void git_filter_list_free(git_filter_list *filters)
git_filter_list_length size_t git_filter_list_length(const git_filter_list *fl)
git_filter_list_load int git_filter_list_load(git_filter_list **filters, git_repository *repo, git_blob *blob, /* can be NULL */	const char *path, git_filter_mode_t mode, uint32_t flags)
git_filter_list_new int git_filter_list_new(git_filter_list **out, git_repository *repo, git_filter_mode_t mode, uint32_t options)
git_filter_list_push int git_filter_list_push(git_filter_list *fl, git_filter *filter, void *payload)
git_filter_list_stream_blob int git_filter_list_stream_blob(git_filter_list *filters, git_blob *blob, git_writestream *target)
git_filter_list_stream_data int git_filter_list_stream_data(git_filter_list *filters, git_buf *data, git_writestream *target)
git_filter_list_stream_file int git_filter_list_stream_file(git_filter_list *filters, git_repository *repo, const char *path, git_writestream *target)
git_filter_lookup git_filter * git_filter_lookup(const char *name)
git_filter_register int git_filter_register(const char *name, git_filter *filter, int priority)
git_filter_source_filemode uint16_t git_filter_source_filemode(const git_filter_source *src)
git_filter_source_flags uint32_t git_filter_source_flags(const git_filter_source *src)
git_filter_source_id const git_oid * git_filter_source_id(const git_filter_source *src)
git_filter_source_mode git_filter_mode_t git_filter_source_mode(const git_filter_source *src)
git_filter_source_path const char * git_filter_source_path(const git_filter_source *src)
git_filter_source_repo git_repository * git_filter_source_repo(const git_filter_source *src)
git_filter_unregister int git_filter_unregister(const char *name)
git_graph_ahead_behind int git_graph_ahead_behind(size_t *ahead, size_t *behind, git_repository *repo, const git_oid *local, const git_oid *upstream)
git_graph_descendant_of int git_graph_descendant_of(git_repository *repo, const git_oid *commit, const git_oid *ancestor)
git_hashsig_compare int git_hashsig_compare(const git_hashsig *a, const git_hashsig *b)
git_hashsig_create int git_hashsig_create(git_hashsig **out, const char *buf, size_t buflen, git_hashsig_option_t opts)
git_hashsig_create_fromfile int git_hashsig_create_fromfile(git_hashsig **out, const char *path, git_hashsig_option_t opts)
git_hashsig_free void git_hashsig_free(git_hashsig *sig)
git_ignore_add_rule int git_ignore_add_rule(git_repository *repo, const char *rules)
git_ignore_clear_internal_rules int git_ignore_clear_internal_rules(git_repository *repo)
git_ignore_path_is_ignored int git_ignore_path_is_ignored(int *ignored, git_repository *repo, const char *path)
git_index_add int git_index_add(git_index *index, const git_index_entry *source_entry)
git_index_add_all int git_index_add_all(git_index *index, const git_strarray *pathspec, unsigned int flags, git_index_matched_path_cb callback, void *payload)
git_index_add_bypath int git_index_add_bypath(git_index *index, const char *path)
git_index_add_from_buffer int git_index_add_from_buffer(git_index *index, const git_index_entry *entry, const void *buffer, size_t len)
git_index_add_frombuffer int git_index_add_frombuffer(git_index *index, const git_index_entry *entry, const void *buffer, size_t len)
git_index_caps int git_index_caps(const git_index *index)
git_index_checksum const git_oid * git_index_checksum(git_index *index)
git_index_clear int git_index_clear(git_index *index)
git_index_conflict_add int git_index_conflict_add(git_index *index, const git_index_entry *ancestor_entry, const git_index_entry *our_entry, const git_index_entry *their_entry)
git_index_conflict_cleanup int git_index_conflict_cleanup(git_index *index)
git_index_conflict_get int git_index_conflict_get(const git_index_entry **ancestor_out, const git_index_entry **our_out, const git_index_entry **their_out, git_index *index, const char *path)
git_index_conflict_iterator_free void git_index_conflict_iterator_free(git_index_conflict_iterator *iterator)
git_index_conflict_iterator_new int git_index_conflict_iterator_new(git_index_conflict_iterator **iterator_out, git_index *index)
git_index_conflict_next int git_index_conflict_next(const git_index_entry **ancestor_out, const git_index_entry **our_out, const git_index_entry **their_out, git_index_conflict_iterator *iterator)
git_index_conflict_remove int git_index_conflict_remove(git_index *index, const char *path)
git_index_entry_is_conflict int git_index_entry_is_conflict(const git_index_entry *entry)
git_index_entry_stage int git_index_entry_stage(const git_index_entry *entry)
git_index_entrycount size_t git_index_entrycount(const git_index *index)
git_index_find int git_index_find(size_t *at_pos, git_index *index, const char *path)
git_index_find_prefix int git_index_find_prefix(size_t *at_pos, git_index *index, const char *prefix)
git_index_free void git_index_free(git_index *index)
git_index_get_byindex const git_index_entry * git_index_get_byindex(git_index *index, size_t n)
git_index_get_bypath const git_index_entry * git_index_get_bypath(git_index *index, const char *path, int stage)
git_index_has_conflicts int git_index_has_conflicts(const git_index *index)
git_index_iterator_free void git_index_iterator_free(git_index_iterator *iterator)
git_index_iterator_new int git_index_iterator_new(git_index_iterator **iterator_out, git_index *index)
git_index_iterator_next int git_index_iterator_next(const git_index_entry **out, git_index_iterator *iterator)
git_index_name_add int git_index_name_add(git_index *index, const char *ancestor, const char *ours, const char *theirs)
git_index_name_clear int git_index_name_clear(git_index *index)
git_index_name_entrycount size_t git_index_name_entrycount(git_index *index)
git_index_name_get_byindex const git_index_name_entry * git_index_name_get_byindex(git_index *index, size_t n)
git_index_new int git_index_new(git_index **out)
git_index_open int git_index_open(git_index **out, const char *index_path)
git_index_owner git_repository * git_index_owner(const git_index *index)
git_index_path const char * git_index_path(const git_index *index)
git_index_read int git_index_read(git_index *index, int force)
git_index_read_tree int git_index_read_tree(git_index *index, const git_tree *tree)
git_index_remove int git_index_remove(git_index *index, const char *path, int stage)
git_index_remove_all int git_index_remove_all(git_index *index, const git_strarray *pathspec, git_index_matched_path_cb callback, void *payload)
git_index_remove_bypath int git_index_remove_bypath(git_index *index, const char *path)
git_index_remove_directory int git_index_remove_directory(git_index *index, const char *dir, int stage)
git_index_reuc_add int git_index_reuc_add(git_index *index, const char *path, int ancestor_mode, const git_oid *ancestor_id, int our_mode, const git_oid *our_id, int their_mode, const git_oid *their_id)
git_index_reuc_clear int git_index_reuc_clear(git_index *index)
git_index_reuc_entrycount size_t git_index_reuc_entrycount(git_index *index)
git_index_reuc_find int git_index_reuc_find(size_t *at_pos, git_index *index, const char *path)
git_index_reuc_get_byindex const git_index_reuc_entry * git_index_reuc_get_byindex(git_index *index, size_t n)
git_index_reuc_get_bypath const git_index_reuc_entry * git_index_reuc_get_bypath(git_index *index, const char *path)
git_index_reuc_remove int git_index_reuc_remove(git_index *index, size_t n)
git_index_set_caps int git_index_set_caps(git_index *index, int caps)
git_index_set_version int git_index_set_version(git_index *index, unsigned int version)
git_index_update_all int git_index_update_all(git_index *index, const git_strarray *pathspec, git_index_matched_path_cb callback, void *payload)
git_index_version unsigned int git_index_version(git_index *index)
git_index_write int git_index_write(git_index *index)
git_index_write_tree int git_index_write_tree(git_oid *out, git_index *index)
git_index_write_tree_to int git_index_write_tree_to(git_oid *out, git_index *index, git_repository *repo)
git_indexer_append int git_indexer_append(git_indexer *idx, const void *data, size_t size, git_indexer_progress *stats)
git_indexer_commit int git_indexer_commit(git_indexer *idx, git_indexer_progress *stats)
git_indexer_free void git_indexer_free(git_indexer *idx)
git_indexer_hash const git_oid * git_indexer_hash(const git_indexer *idx)
git_indexer_init_options int git_indexer_init_options(git_indexer_options *opts, unsigned int version)
git_indexer_new int git_indexer_new(git_indexer **out, const char *path, unsigned int mode, git_odb *odb, git_indexer_options *opts)
git_indexer_options_init int git_indexer_options_init(git_indexer_options *opts, unsigned int version)
git_libgit2_features int git_libgit2_features(void)
git_libgit2_init int git_libgit2_init(void)
git_libgit2_opts int git_libgit2_opts(int option, ...)
git_libgit2_shutdown int git_libgit2_shutdown(void)
git_libgit2_version int git_libgit2_version(int *major, int *minor, int *rev)
git_mailmap_add_entry int git_mailmap_add_entry(git_mailmap *mm, const char *real_name, const char *real_email, const char *replace_name, const char *replace_email)
git_mailmap_free void git_mailmap_free(git_mailmap *mm)
git_mailmap_from_buffer int git_mailmap_from_buffer(git_mailmap **out, const char *buf, size_t len)
git_mailmap_from_repository int git_mailmap_from_repository(git_mailmap **out, git_repository *repo)
git_mailmap_new int git_mailmap_new(git_mailmap **out)
git_mailmap_resolve int git_mailmap_resolve(const char **real_name, const char **real_email, const git_mailmap *mm, const char *name, const char *email)
git_mailmap_resolve_signature int git_mailmap_resolve_signature(git_signature **out, const git_mailmap *mm, const git_signature *sig)
git_mempack_dump int git_mempack_dump(git_buf *pack, git_repository *repo, git_odb_backend *backend)
git_mempack_new int git_mempack_new(git_odb_backend **out)
git_mempack_reset int git_mempack_reset(git_odb_backend *backend)
git_merge int git_merge(git_repository *repo, const git_annotated_commit **their_heads, size_t their_heads_len, const git_merge_options *merge_opts, const git_checkout_options *checkout_opts)
git_merge_analysis int git_merge_analysis(git_merge_analysis_t *analysis_out, git_merge_preference_t *preference_out, git_repository *repo, const git_annotated_commit **their_heads, size_t their_heads_len)
git_merge_analysis_for_ref int git_merge_analysis_for_ref(git_merge_analysis_t *analysis_out, git_merge_preference_t *preference_out, git_repository *repo, git_reference *our_ref, const git_annotated_commit **their_heads, size_t their_heads_len)
git_merge_base int git_merge_base(git_oid *out, git_repository *repo, const git_oid *one, const git_oid *two)
git_merge_base_many int git_merge_base_many(git_oid *out, git_repository *repo, size_t length, const git_oid input_array[])
git_merge_base_octopus int git_merge_base_octopus(git_oid *out, git_repository *repo, size_t length, const git_oid input_array[])
git_merge_bases int git_merge_bases(git_oidarray *out, git_repository *repo, const git_oid *one, const git_oid *two)
git_merge_bases_many int git_merge_bases_many(git_oidarray *out, git_repository *repo, size_t length, const git_oid input_array[])
git_merge_commits int git_merge_commits(git_index **out, git_repository *repo, const git_commit *our_commit, const git_commit *their_commit, const git_merge_options *opts)
git_merge_driver_lookup git_merge_driver * git_merge_driver_lookup(const char *name)
git_merge_driver_register int git_merge_driver_register(const char *name, git_merge_driver *driver)
git_merge_driver_source_ancestor const git_index_entry * git_merge_driver_source_ancestor(const git_merge_driver_source *src)
git_merge_driver_source_file_options const git_merge_file_options * git_merge_driver_source_file_options(const git_merge_driver_source *src)
git_merge_driver_source_ours const git_index_entry * git_merge_driver_source_ours(const git_merge_driver_source *src)
git_merge_driver_source_repo git_repository * git_merge_driver_source_repo(const git_merge_driver_source *src)
git_merge_driver_source_theirs const git_index_entry * git_merge_driver_source_theirs(const git_merge_driver_source *src)
git_merge_driver_unregister int git_merge_driver_unregister(const char *name)
git_merge_file int git_merge_file(git_merge_file_result *out, const git_merge_file_input *ancestor, const git_merge_file_input *ours, const git_merge_file_input *theirs, const git_merge_file_options *opts)
git_merge_file_from_index int git_merge_file_from_index(git_merge_file_result *out, git_repository *repo, const git_index_entry *ancestor, const git_index_entry *ours, const git_index_entry *theirs, const git_merge_file_options *opts)
git_merge_file_init_input int git_merge_file_init_input(git_merge_file_input *input, unsigned int version)
git_merge_file_init_options int git_merge_file_init_options(git_merge_file_options *opts, unsigned int version)
git_merge_file_input_init int git_merge_file_input_init(git_merge_file_input *opts, unsigned int version)
git_merge_file_options_init int git_merge_file_options_init(git_merge_file_options *opts, unsigned int version)
git_merge_file_result_free void git_merge_file_result_free(git_merge_file_result *result)
git_merge_init_options int git_merge_init_options(git_merge_options *opts, unsigned int version)
git_merge_options_init int git_merge_options_init(git_merge_options *opts, unsigned int version)
git_merge_trees int git_merge_trees(git_index **out, git_repository *repo, const git_tree *ancestor_tree, const git_tree *our_tree, const git_tree *their_tree, const git_merge_options *opts)
git_message_prettify int git_message_prettify(git_buf *out, const char *message, int strip_comments, char comment_char)
git_message_trailer_array_free void git_message_trailer_array_free(git_message_trailer_array *arr)
git_message_trailers int git_message_trailers(git_message_trailer_array *arr, const char *message)
git_note_author const git_signature * git_note_author(const git_note *note)
git_note_commit_create int git_note_commit_create(git_oid *notes_commit_out, git_oid *notes_blob_out, git_repository *repo, git_commit *parent, const git_signature *author, const git_signature *committer, const git_oid *oid, const char *note, int allow_note_overwrite)
git_note_commit_iterator_new int git_note_commit_iterator_new(git_note_iterator **out, git_commit *notes_commit)
git_note_commit_read int git_note_commit_read(git_note **out, git_repository *repo, git_commit *notes_commit, const git_oid *oid)
git_note_commit_remove int git_note_commit_remove(git_oid *notes_commit_out, git_repository *repo, git_commit *notes_commit, const git_signature *author, const git_signature *committer, const git_oid *oid)
git_note_committer const git_signature * git_note_committer(const git_note *note)
git_note_create int git_note_create(git_oid *out, git_repository *repo, const char *notes_ref, const git_signature *author, const git_signature *committer, const git_oid *oid, const char *note, int force)
git_note_default_ref int git_note_default_ref(git_buf *out, git_repository *repo)
git_note_foreach int git_note_foreach(git_repository *repo, const char *notes_ref, git_note_foreach_cb note_cb, void *payload)
git_note_free void git_note_free(git_note *note)
git_note_id const git_oid * git_note_id(const git_note *note)
git_note_iterator_free void git_note_iterator_free(git_note_iterator *it)
git_note_iterator_new int git_note_iterator_new(git_note_iterator **out, git_repository *repo, const char *notes_ref)
git_note_message const char * git_note_message(const git_note *note)
git_note_next int git_note_next(git_oid* note_id, git_oid* annotated_id, git_note_iterator *it)
git_note_read int git_note_read(git_note **out, git_repository *repo, const char *notes_ref, const git_oid *oid)
git_note_remove int git_note_remove(git_repository *repo, const char *notes_ref, const git_signature *author, const git_signature *committer, const git_oid *oid)
git_object__size size_t git_object__size(git_object_t type)
git_object_dup int git_object_dup(git_object **dest, git_object *source)
git_object_free void git_object_free(git_object *object)
git_object_id const git_oid * git_object_id(const git_object *obj)
git_object_lookup int git_object_lookup(git_object **object, git_repository *repo, const git_oid *id, git_object_t type)
git_object_lookup_bypath int git_object_lookup_bypath(git_object **out, const git_object *treeish, const char *path, git_object_t type)
git_object_lookup_prefix int git_object_lookup_prefix(git_object **object_out, git_repository *repo, const git_oid *id, size_t len, git_object_t type)
git_object_owner git_repository * git_object_owner(const git_object *obj)
git_object_peel int git_object_peel(git_object **peeled, const git_object *object, git_object_t target_type)
git_object_short_id int git_object_short_id(git_buf *out, const git_object *obj)
git_object_string2type git_object_t git_object_string2type(const char *str)
git_object_type git_object_t git_object_type(const git_object *obj)
git_object_type2string const char * git_object_type2string(git_object_t type)
git_object_typeisloose int git_object_typeisloose(git_object_t type)
git_odb_add_alternate int git_odb_add_alternate(git_odb *odb, git_odb_backend *backend, int priority)
git_odb_add_backend int git_odb_add_backend(git_odb *odb, git_odb_backend *backend, int priority)
git_odb_add_disk_alternate int git_odb_add_disk_alternate(git_odb *odb, const char *path)
git_odb_backend_data_alloc void * git_odb_backend_data_alloc(git_odb_backend *backend, size_t len)
git_odb_backend_data_free void git_odb_backend_data_free(git_odb_backend *backend, void *data)
git_odb_backend_loose int git_odb_backend_loose(git_odb_backend **out, const char *objects_dir, int compression_level, int do_fsync, unsigned int dir_mode, unsigned int file_mode)
git_odb_backend_malloc void * git_odb_backend_malloc(git_odb_backend *backend, size_t len)
git_odb_backend_one_pack int git_odb_backend_one_pack(git_odb_backend **out, const char *index_file)
git_odb_backend_pack int git_odb_backend_pack(git_odb_backend **out, const char *objects_dir)
git_odb_exists int git_odb_exists(git_odb *db, const git_oid *id)
git_odb_exists_prefix int git_odb_exists_prefix(git_oid *out, git_odb *db, const git_oid *short_id, size_t len)
git_odb_expand_ids int git_odb_expand_ids(git_odb *db, git_odb_expand_id *ids, size_t count)
git_odb_foreach int git_odb_foreach(git_odb *db, git_odb_foreach_cb cb, void *payload)
git_odb_free void git_odb_free(git_odb *db)
git_odb_get_backend int git_odb_get_backend(git_odb_backend **out, git_odb *odb, size_t pos)
git_odb_hash int git_odb_hash(git_oid *out, const void *data, size_t len, git_object_t type)
git_odb_hashfile int git_odb_hashfile(git_oid *out, const char *path, git_object_t type)
git_odb_init_backend int git_odb_init_backend(git_odb_backend *backend, unsigned int version)
git_odb_new int git_odb_new(git_odb **out)
git_odb_num_backends size_t git_odb_num_backends(git_odb *odb)
git_odb_object_data const void * git_odb_object_data(git_odb_object *object)
git_odb_object_dup int git_odb_object_dup(git_odb_object **dest, git_odb_object *source)
git_odb_object_free void git_odb_object_free(git_odb_object *object)
git_odb_object_id const git_oid * git_odb_object_id(git_odb_object *object)
git_odb_object_size size_t git_odb_object_size(git_odb_object *object)
git_odb_object_type git_object_t git_odb_object_type(git_odb_object *object)
git_odb_open int git_odb_open(git_odb **out, const char *objects_dir)
git_odb_open_rstream int git_odb_open_rstream(git_odb_stream **out, size_t *len, git_object_t *type, git_odb *db, const git_oid *oid)
git_odb_open_wstream int git_odb_open_wstream(git_odb_stream **out, git_odb *db, git_object_size_t size, git_object_t type)
git_odb_read int git_odb_read(git_odb_object **out, git_odb *db, const git_oid *id)
git_odb_read_header int git_odb_read_header(size_t *len_out, git_object_t *type_out, git_odb *db, const git_oid *id)
git_odb_read_prefix int git_odb_read_prefix(git_odb_object **out, git_odb *db, const git_oid *short_id, size_t len)
git_odb_refresh int git_odb_refresh(struct git_odb *db)
git_odb_stream_finalize_write int git_odb_stream_finalize_write(git_oid *out, git_odb_stream *stream)
git_odb_stream_free void git_odb_stream_free(git_odb_stream *stream)
git_odb_stream_read int git_odb_stream_read(git_odb_stream *stream, char *buffer, size_t len)
git_odb_stream_write int git_odb_stream_write(git_odb_stream *stream, const char *buffer, size_t len)
git_odb_write int git_odb_write(git_oid *out, git_odb *odb, const void *data, size_t len, git_object_t type)
git_odb_write_pack int git_odb_write_pack(git_odb_writepack **out, git_odb *db, git_indexer_progress_cb progress_cb, void *progress_payload)
git_oid_cmp int git_oid_cmp(const git_oid *a, const git_oid *b)
git_oid_cpy int git_oid_cpy(git_oid *out, const git_oid *src)
git_oid_equal int git_oid_equal(const git_oid *a, const git_oid *b)
git_oid_fmt int git_oid_fmt(char *out, const git_oid *id)
git_oid_fromraw int git_oid_fromraw(git_oid *out, const unsigned char *raw)
git_oid_fromstr int git_oid_fromstr(git_oid *out, const char *str)
git_oid_fromstrn int git_oid_fromstrn(git_oid *out, const char *str, size_t length)
git_oid_fromstrp int git_oid_fromstrp(git_oid *out, const char *str)
git_oid_is_zero int git_oid_is_zero(const git_oid *id)
git_oid_iszero int git_oid_iszero(const git_oid *id)
git_oid_ncmp int git_oid_ncmp(const git_oid *a, const git_oid *b, size_t len)
git_oid_nfmt int git_oid_nfmt(char *out, size_t n, const git_oid *id)
git_oid_pathfmt int git_oid_pathfmt(char *out, const git_oid *id)
git_oid_shorten_add int git_oid_shorten_add(git_oid_shorten *os, const char *text_id)
git_oid_shorten_free void git_oid_shorten_free(git_oid_shorten *os)
git_oid_shorten_new git_oid_shorten * git_oid_shorten_new(size_t min_length)
git_oid_strcmp int git_oid_strcmp(const git_oid *id, const char *str)
git_oid_streq int git_oid_streq(const git_oid *id, const char *str)
git_oid_tostr char * git_oid_tostr(char *out, size_t n, const git_oid *id)
git_oid_tostr_s char * git_oid_tostr_s(const git_oid *oid)
git_oidarray_free void git_oidarray_free(git_oidarray *array)
git_openssl_set_locking int git_openssl_set_locking(void)
git_packbuilder_foreach int git_packbuilder_foreach(git_packbuilder *pb, git_packbuilder_foreach_cb cb, void *payload)
git_packbuilder_free void git_packbuilder_free(git_packbuilder *pb)
git_packbuilder_hash const git_oid * git_packbuilder_hash(git_packbuilder *pb)
git_packbuilder_insert int git_packbuilder_insert(git_packbuilder *pb, const git_oid *id, const char *name)
git_packbuilder_insert_commit int git_packbuilder_insert_commit(git_packbuilder *pb, const git_oid *id)
git_packbuilder_insert_recur int git_packbuilder_insert_recur(git_packbuilder *pb, const git_oid *id, const char *name)
git_packbuilder_insert_tree int git_packbuilder_insert_tree(git_packbuilder *pb, const git_oid *id)
git_packbuilder_insert_walk int git_packbuilder_insert_walk(git_packbuilder *pb, git_revwalk *walk)
git_packbuilder_new int git_packbuilder_new(git_packbuilder **out, git_repository *repo)
git_packbuilder_object_count size_t git_packbuilder_object_count(git_packbuilder *pb)
git_packbuilder_set_callbacks int git_packbuilder_set_callbacks(git_packbuilder *pb, git_packbuilder_progress progress_cb, void *progress_cb_payload)
git_packbuilder_set_threads unsigned int git_packbuilder_set_threads(git_packbuilder *pb, unsigned int n)
git_packbuilder_write int git_packbuilder_write(git_packbuilder *pb, const char *path, unsigned int mode, git_indexer_progress_cb progress_cb, void *progress_cb_payload)
git_packbuilder_write_buf int git_packbuilder_write_buf(git_buf *buf, git_packbuilder *pb)
git_packbuilder_written size_t git_packbuilder_written(git_packbuilder *pb)
git_patch_free void git_patch_free(git_patch *patch)
git_patch_from_blob_and_buffer int git_patch_from_blob_and_buffer(git_patch **out, const git_blob *old_blob, const char *old_as_path, const void *buffer, size_t buffer_len, const char *buffer_as_path, const git_diff_options *opts)
git_patch_from_blobs int git_patch_from_blobs(git_patch **out, const git_blob *old_blob, const char *old_as_path, const git_blob *new_blob, const char *new_as_path, const git_diff_options *opts)
git_patch_from_buffers int git_patch_from_buffers(git_patch **out, const void *old_buffer, size_t old_len, const char *old_as_path, const void *new_buffer, size_t new_len, const char *new_as_path, const git_diff_options *opts)
git_patch_from_diff int git_patch_from_diff(git_patch **out, git_diff *diff, size_t idx)
git_patch_get_delta const git_diff_delta * git_patch_get_delta(const git_patch *patch)
git_patch_get_hunk int git_patch_get_hunk(const git_diff_hunk **out, size_t *lines_in_hunk, git_patch *patch, size_t hunk_idx)
git_patch_get_line_in_hunk int git_patch_get_line_in_hunk(const git_diff_line **out, git_patch *patch, size_t hunk_idx, size_t line_of_hunk)
git_patch_line_stats int git_patch_line_stats(size_t *total_context, size_t *total_additions, size_t *total_deletions, const git_patch *patch)
git_patch_num_hunks size_t git_patch_num_hunks(const git_patch *patch)
git_patch_num_lines_in_hunk int git_patch_num_lines_in_hunk(const git_patch *patch, size_t hunk_idx)
git_patch_print int git_patch_print(git_patch *patch, git_diff_line_cb print_cb, void *payload)
git_patch_size size_t git_patch_size(git_patch *patch, int include_context, int include_hunk_headers, int include_file_headers)
git_patch_to_buf int git_patch_to_buf(git_buf *out, git_patch *patch)
git_path_is_gitfile int git_path_is_gitfile(const char *path, size_t pathlen, git_path_gitfile gitfile, git_path_fs fs)
git_pathspec_free void git_pathspec_free(git_pathspec *ps)
git_pathspec_match_diff int git_pathspec_match_diff(git_pathspec_match_list **out, git_diff *diff, uint32_t flags, git_pathspec *ps)
git_pathspec_match_index int git_pathspec_match_index(git_pathspec_match_list **out, git_index *index, uint32_t flags, git_pathspec *ps)
git_pathspec_match_list_diff_entry const git_diff_delta * git_pathspec_match_list_diff_entry(const git_pathspec_match_list *m, size_t pos)
git_pathspec_match_list_entry const char * git_pathspec_match_list_entry(const git_pathspec_match_list *m, size_t pos)
git_pathspec_match_list_entrycount size_t git_pathspec_match_list_entrycount(const git_pathspec_match_list *m)
git_pathspec_match_list_failed_entry const char * git_pathspec_match_list_failed_entry(const git_pathspec_match_list *m, size_t pos)
git_pathspec_match_list_failed_entrycount size_t git_pathspec_match_list_failed_entrycount(const git_pathspec_match_list *m)
git_pathspec_match_list_free void git_pathspec_match_list_free(git_pathspec_match_list *m)
git_pathspec_match_tree int git_pathspec_match_tree(git_pathspec_match_list **out, git_tree *tree, uint32_t flags, git_pathspec *ps)
git_pathspec_match_workdir int git_pathspec_match_workdir(git_pathspec_match_list **out, git_repository *repo, uint32_t flags, git_pathspec *ps)
git_pathspec_matches_path int git_pathspec_matches_path(const git_pathspec *ps, uint32_t flags, const char *path)
git_pathspec_new int git_pathspec_new(git_pathspec **out, const git_strarray *pathspec)
git_proxy_init_options int git_proxy_init_options(git_proxy_options *opts, unsigned int version)
git_proxy_options_init int git_proxy_options_init(git_proxy_options *opts, unsigned int version)
git_push_init_options int git_push_init_options(git_push_options *opts, unsigned int version)
git_push_options_init int git_push_options_init(git_push_options *opts, unsigned int version)
git_rebase_abort int git_rebase_abort(git_rebase *rebase)
git_rebase_commit int git_rebase_commit(git_oid *id, git_rebase *rebase, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message)
git_rebase_finish int git_rebase_finish(git_rebase *rebase, const git_signature *signature)
git_rebase_free void git_rebase_free(git_rebase *rebase)
git_rebase_init int git_rebase_init(git_rebase **out, git_repository *repo, const git_annotated_commit *branch, const git_annotated_commit *upstream, const git_annotated_commit *onto, const git_rebase_options *opts)
git_rebase_init_options int git_rebase_init_options(git_rebase_options *opts, unsigned int version)
git_rebase_inmemory_index int git_rebase_inmemory_index(git_index **index, git_rebase *rebase)
git_rebase_next int git_rebase_next(git_rebase_operation **operation, git_rebase *rebase)
git_rebase_onto_id const git_oid * git_rebase_onto_id(git_rebase *rebase)
git_rebase_onto_name const char * git_rebase_onto_name(git_rebase *rebase)
git_rebase_open int git_rebase_open(git_rebase **out, git_repository *repo, const git_rebase_options *opts)
git_rebase_operation_byindex git_rebase_operation * git_rebase_operation_byindex(git_rebase *rebase, size_t idx)
git_rebase_operation_current size_t git_rebase_operation_current(git_rebase *rebase)
git_rebase_operation_entrycount size_t git_rebase_operation_entrycount(git_rebase *rebase)
git_rebase_options_init int git_rebase_options_init(git_rebase_options *opts, unsigned int version)
git_rebase_orig_head_id const git_oid * git_rebase_orig_head_id(git_rebase *rebase)
git_rebase_orig_head_name const char * git_rebase_orig_head_name(git_rebase *rebase)
git_refdb_backend_fs int git_refdb_backend_fs(git_refdb_backend **backend_out, git_repository *repo)
git_refdb_compress int git_refdb_compress(git_refdb *refdb)
git_refdb_free void git_refdb_free(git_refdb *refdb)
git_refdb_init_backend int git_refdb_init_backend(git_refdb_backend *backend, unsigned int version)
git_refdb_new int git_refdb_new(git_refdb **out, git_repository *repo)
git_refdb_open int git_refdb_open(git_refdb **out, git_repository *repo)
git_refdb_set_backend int git_refdb_set_backend(git_refdb *refdb, git_refdb_backend *backend)
git_reference__alloc git_reference * git_reference__alloc(const char *name, const git_oid *oid, const git_oid *peel)
git_reference__alloc_symbolic git_reference * git_reference__alloc_symbolic(const char *name, const char *target)
git_reference_cmp int git_reference_cmp(const git_reference *ref1, const git_reference *ref2)
git_reference_create int git_reference_create(git_reference **out, git_repository *repo, const char *name, const git_oid *id, int force, const char *log_message)
git_reference_create_matching int git_reference_create_matching(git_reference **out, git_repository *repo, const char *name, const git_oid *id, int force, const git_oid *current_id, const char *log_message)
git_reference_delete int git_reference_delete(git_reference *ref)
git_reference_dup int git_reference_dup(git_reference **dest, git_reference *source)
git_reference_dwim int git_reference_dwim(git_reference **out, git_repository *repo, const char *shorthand)
git_reference_ensure_log int git_reference_ensure_log(git_repository *repo, const char *refname)
git_reference_foreach int git_reference_foreach(git_repository *repo, git_reference_foreach_cb callback, void *payload)
git_reference_foreach_glob int git_reference_foreach_glob(git_repository *repo, const char *glob, git_reference_foreach_name_cb callback, void *payload)
git_reference_foreach_name int git_reference_foreach_name(git_repository *repo, git_reference_foreach_name_cb callback, void *payload)
git_reference_free void git_reference_free(git_reference *ref)
git_reference_has_log int git_reference_has_log(git_repository *repo, const char *refname)
git_reference_is_branch int git_reference_is_branch(const git_reference *ref)
git_reference_is_note int git_reference_is_note(const git_reference *ref)
git_reference_is_remote int git_reference_is_remote(const git_reference *ref)
git_reference_is_tag int git_reference_is_tag(const git_reference *ref)
git_reference_is_valid_name int git_reference_is_valid_name(const char *refname)
git_reference_iterator_free void git_reference_iterator_free(git_reference_iterator *iter)
git_reference_iterator_glob_new int git_reference_iterator_glob_new(git_reference_iterator **out, git_repository *repo, const char *glob)
git_reference_iterator_new int git_reference_iterator_new(git_reference_iterator **out, git_repository *repo)
git_reference_list int git_reference_list(git_strarray *array, git_repository *repo)
git_reference_lookup int git_reference_lookup(git_reference **out, git_repository *repo, const char *name)
git_reference_name const char * git_reference_name(const git_reference *ref)
git_reference_name_to_id int git_reference_name_to_id(git_oid *out, git_repository *repo, const char *name)
git_reference_next int git_reference_next(git_reference **out, git_reference_iterator *iter)
git_reference_next_name int git_reference_next_name(const char **out, git_reference_iterator *iter)
git_reference_normalize_name int git_reference_normalize_name(char *buffer_out, size_t buffer_size, const char *name, unsigned int flags)
git_reference_owner git_repository * git_reference_owner(const git_reference *ref)
git_reference_peel int git_reference_peel(git_object **out, const git_reference *ref, git_object_t type)
git_reference_remove int git_reference_remove(git_repository *repo, const char *name)
git_reference_rename int git_reference_rename(git_reference **new_ref, git_reference *ref, const char *new_name, int force, const char *log_message)
git_reference_resolve int git_reference_resolve(git_reference **out, const git_reference *ref)
git_reference_set_target int git_reference_set_target(git_reference **out, git_reference *ref, const git_oid *id, const char *log_message)
git_reference_shorthand const char * git_reference_shorthand(const git_reference *ref)
git_reference_symbolic_create int git_reference_symbolic_create(git_reference **out, git_repository *repo, const char *name, const char *target, int force, const char *log_message)
git_reference_symbolic_create_matching int git_reference_symbolic_create_matching(git_reference **out, git_repository *repo, const char *name, const char *target, int force, const char *current_value, const char *log_message)
git_reference_symbolic_set_target int git_reference_symbolic_set_target(git_reference **out, git_reference *ref, const char *target, const char *log_message)
git_reference_symbolic_target const char * git_reference_symbolic_target(const git_reference *ref)
git_reference_target const git_oid * git_reference_target(const git_reference *ref)
git_reference_target_peel const git_oid * git_reference_target_peel(const git_reference *ref)
git_reference_type git_reference_t git_reference_type(const git_reference *ref)
git_reflog_append int git_reflog_append(git_reflog *reflog, const git_oid *id, const git_signature *committer, const char *msg)
git_reflog_delete int git_reflog_delete(git_repository *repo, const char *name)
git_reflog_drop int git_reflog_drop(git_reflog *reflog, size_t idx, int rewrite_previous_entry)
git_reflog_entry__alloc git_reflog_entry * git_reflog_entry__alloc(void)
git_reflog_entry__free void git_reflog_entry__free(git_reflog_entry *entry)
git_reflog_entry_byindex const git_reflog_entry * git_reflog_entry_byindex(const git_reflog *reflog, size_t idx)
git_reflog_entry_committer const git_signature * git_reflog_entry_committer(const git_reflog_entry *entry)
git_reflog_entry_id_new const git_oid * git_reflog_entry_id_new(const git_reflog_entry *entry)
git_reflog_entry_id_old const git_oid * git_reflog_entry_id_old(const git_reflog_entry *entry)
git_reflog_entry_message const char * git_reflog_entry_message(const git_reflog_entry *entry)
git_reflog_entrycount size_t git_reflog_entrycount(git_reflog *reflog)
git_reflog_free void git_reflog_free(git_reflog *reflog)
git_reflog_read int git_reflog_read(git_reflog **out, git_repository *repo, const char *name)
git_reflog_rename int git_reflog_rename(git_repository *repo, const char *old_name, const char *name)
git_reflog_write int git_reflog_write(git_reflog *reflog)
git_refspec_direction git_direction git_refspec_direction(const git_refspec *spec)
git_refspec_dst const char * git_refspec_dst(const git_refspec *refspec)
git_refspec_dst_matches int git_refspec_dst_matches(const git_refspec *refspec, const char *refname)
git_refspec_force int git_refspec_force(const git_refspec *refspec)
git_refspec_free void git_refspec_free(git_refspec *refspec)
git_refspec_parse int git_refspec_parse(git_refspec **refspec, const char *input, int is_fetch)
git_refspec_rtransform int git_refspec_rtransform(git_buf *out, const git_refspec *spec, const char *name)
git_refspec_src const char * git_refspec_src(const git_refspec *refspec)
git_refspec_src_matches int git_refspec_src_matches(const git_refspec *refspec, const char *refname)
git_refspec_string const char * git_refspec_string(const git_refspec *refspec)
git_refspec_transform int git_refspec_transform(git_buf *out, const git_refspec *spec, const char *name)
git_remote_add_fetch int git_remote_add_fetch(git_repository *repo, const char *remote, const char *refspec)
git_remote_add_push int git_remote_add_push(git_repository *repo, const char *remote, const char *refspec)
git_remote_autotag git_remote_autotag_option_t git_remote_autotag(const git_remote *remote)
git_remote_connect int git_remote_connect(git_remote *remote, git_direction direction, const git_remote_callbacks *callbacks, const git_proxy_options *proxy_opts, const git_strarray *custom_headers)
git_remote_connected int git_remote_connected(const git_remote *remote)
git_remote_create int git_remote_create(git_remote **out, git_repository *repo, const char *name, const char *url)
git_remote_create_anonymous int git_remote_create_anonymous(git_remote **out, git_repository *repo, const char *url)
git_remote_create_detached int git_remote_create_detached(git_remote **out, const char *url)
git_remote_create_init_options int git_remote_create_init_options(git_remote_create_options *opts, unsigned int version)
git_remote_create_options_init int git_remote_create_options_init(git_remote_create_options *opts, unsigned int version)
git_remote_create_with_fetchspec int git_remote_create_with_fetchspec(git_remote **out, git_repository *repo, const char *name, const char *url, const char *fetch)
git_remote_create_with_opts int git_remote_create_with_opts(git_remote **out, const char *url, const git_remote_create_options *opts)
git_remote_default_branch int git_remote_default_branch(git_buf *out, git_remote *remote)
git_remote_delete int git_remote_delete(git_repository *repo, const char *name)
git_remote_disconnect int git_remote_disconnect(git_remote *remote)
git_remote_download int git_remote_download(git_remote *remote, const git_strarray *refspecs, const git_fetch_options *opts)
git_remote_dup int git_remote_dup(git_remote **dest, git_remote *source)
git_remote_fetch int git_remote_fetch(git_remote *remote, const git_strarray *refspecs, const git_fetch_options *opts, const char *reflog_message)
git_remote_free void git_remote_free(git_remote *remote)
git_remote_get_fetch_refspecs int git_remote_get_fetch_refspecs(git_strarray *array, const git_remote *remote)
git_remote_get_push_refspecs int git_remote_get_push_refspecs(git_strarray *array, const git_remote *remote)
git_remote_get_refspec const git_refspec * git_remote_get_refspec(const git_remote *remote, size_t n)
git_remote_init_callbacks int git_remote_init_callbacks(git_remote_callbacks *opts, unsigned int version)
git_remote_is_valid_name int git_remote_is_valid_name(const char *remote_name)
git_remote_list int git_remote_list(git_strarray *out, git_repository *repo)
git_remote_lookup int git_remote_lookup(git_remote **out, git_repository *repo, const char *name)
git_remote_ls int git_remote_ls(const git_remote_head ***out, size_t *size, git_remote *remote)
git_remote_name const char * git_remote_name(const git_remote *remote)
git_remote_owner git_repository * git_remote_owner(const git_remote *remote)
git_remote_prune int git_remote_prune(git_remote *remote, const git_remote_callbacks *callbacks)
git_remote_prune_refs int git_remote_prune_refs(const git_remote *remote)
git_remote_push int git_remote_push(git_remote *remote, const git_strarray *refspecs, const git_push_options *opts)
git_remote_pushurl const char * git_remote_pushurl(const git_remote *remote)
git_remote_refspec_count size_t git_remote_refspec_count(const git_remote *remote)
git_remote_rename int git_remote_rename(git_strarray *problems, git_repository *repo, const char *name, const char *new_name)
git_remote_set_autotag int git_remote_set_autotag(git_repository *repo, const char *remote, git_remote_autotag_option_t value)
git_remote_set_pushurl int git_remote_set_pushurl(git_repository *repo, const char *remote, const char* url)
git_remote_set_url int git_remote_set_url(git_repository *repo, const char *remote, const char* url)
git_remote_stats const git_indexer_progress * git_remote_stats(git_remote *remote)
git_remote_stop int git_remote_stop(git_remote *remote)
git_remote_update_tips int git_remote_update_tips(git_remote *remote, const git_remote_callbacks *callbacks, int update_fetchhead, git_remote_autotag_option_t download_tags, const char *reflog_message)
git_remote_upload int git_remote_upload(git_remote *remote, const git_strarray *refspecs, const git_push_options *opts)
git_remote_url const char * git_remote_url(const git_remote *remote)
git_repository__cleanup int git_repository__cleanup(git_repository *repo)
git_repository_commondir const char * git_repository_commondir(const git_repository *repo)
git_repository_config int git_repository_config(git_config **out, git_repository *repo)
git_repository_config_snapshot int git_repository_config_snapshot(git_config **out, git_repository *repo)
git_repository_detach_head int git_repository_detach_head(git_repository* repo)
git_repository_discover int git_repository_discover(git_buf *out, const char *start_path, int across_fs, const char *ceiling_dirs)
git_repository_fetchhead_foreach int git_repository_fetchhead_foreach(git_repository *repo, git_repository_fetchhead_foreach_cb callback, void *payload)
git_repository_free void git_repository_free(git_repository *repo)
git_repository_get_namespace const char * git_repository_get_namespace(git_repository *repo)
git_repository_hashfile int git_repository_hashfile(git_oid *out, git_repository *repo, const char *path, git_object_t type, const char *as_path)
git_repository_head int git_repository_head(git_reference **out, git_repository *repo)
git_repository_head_detached int git_repository_head_detached(git_repository *repo)
git_repository_head_detached_for_worktree int git_repository_head_detached_for_worktree(git_repository *repo, const char *name)
git_repository_head_for_worktree int git_repository_head_for_worktree(git_reference **out, git_repository *repo, const char *name)
git_repository_head_unborn int git_repository_head_unborn(git_repository *repo)
git_repository_ident int git_repository_ident(const char **name, const char **email, const git_repository *repo)
git_repository_index int git_repository_index(git_index **out, git_repository *repo)
git_repository_init int git_repository_init(git_repository **out, const char *path, unsigned is_bare)
git_repository_init_ext int git_repository_init_ext(git_repository **out, const char *repo_path, git_repository_init_options *opts)
git_repository_init_init_options int git_repository_init_init_options(git_repository_init_options *opts, unsigned int version)
git_repository_init_options_init int git_repository_init_options_init(git_repository_init_options *opts, unsigned int version)
git_repository_is_bare int git_repository_is_bare(const git_repository *repo)
git_repository_is_empty int git_repository_is_empty(git_repository *repo)
git_repository_is_shallow int git_repository_is_shallow(git_repository *repo)
git_repository_is_worktree int git_repository_is_worktree(const git_repository *repo)
git_repository_item_path int git_repository_item_path(git_buf *out, const git_repository *repo, git_repository_item_t item)
git_repository_mergehead_foreach int git_repository_mergehead_foreach(git_repository *repo, git_repository_mergehead_foreach_cb callback, void *payload)
git_repository_message int git_repository_message(git_buf *out, git_repository *repo)
git_repository_message_remove int git_repository_message_remove(git_repository *repo)
git_repository_new int git_repository_new(git_repository **out)
git_repository_odb int git_repository_odb(git_odb **out, git_repository *repo)
git_repository_open int git_repository_open(git_repository **out, const char *path)
git_repository_open_bare int git_repository_open_bare(git_repository **out, const char *bare_path)
git_repository_open_ext int git_repository_open_ext(git_repository **out, const char *path, unsigned int flags, const char *ceiling_dirs)
git_repository_open_from_worktree int git_repository_open_from_worktree(git_repository **out, git_worktree *wt)
git_repository_path const char * git_repository_path(const git_repository *repo)
git_repository_refdb int git_repository_refdb(git_refdb **out, git_repository *repo)
git_repository_reinit_filesystem int git_repository_reinit_filesystem(git_repository *repo, int recurse_submodules)
git_repository_set_bare int git_repository_set_bare(git_repository *repo)
git_repository_set_config int git_repository_set_config(git_repository *repo, git_config *config)
git_repository_set_head int git_repository_set_head(git_repository* repo, const char* refname)
git_repository_set_head_detached int git_repository_set_head_detached(git_repository* repo, const git_oid* commitish)
git_repository_set_head_detached_from_annotated int git_repository_set_head_detached_from_annotated(git_repository *repo, const git_annotated_commit *commitish)
git_repository_set_ident int git_repository_set_ident(git_repository *repo, const char *name, const char *email)
git_repository_set_index int git_repository_set_index(git_repository *repo, git_index *index)
git_repository_set_namespace int git_repository_set_namespace(git_repository *repo, const char *nmspace)
git_repository_set_odb int git_repository_set_odb(git_repository *repo, git_odb *odb)
git_repository_set_refdb int git_repository_set_refdb(git_repository *repo, git_refdb *refdb)
git_repository_set_workdir int git_repository_set_workdir(git_repository *repo, const char *workdir, int update_gitlink)
git_repository_state int git_repository_state(git_repository *repo)
git_repository_state_cleanup int git_repository_state_cleanup(git_repository *repo)
git_repository_submodule_cache_all int git_repository_submodule_cache_all(git_repository *repo)
git_repository_submodule_cache_clear int git_repository_submodule_cache_clear(git_repository *repo)
git_repository_workdir const char * git_repository_workdir(const git_repository *repo)
git_repository_wrap_odb int git_repository_wrap_odb(git_repository **out, git_odb *odb)
git_reset int git_reset(git_repository *repo, const git_object *target, git_reset_t reset_type, const git_checkout_options *checkout_opts)
git_reset_default int git_reset_default(git_repository *repo, const git_object *target, const git_strarray* pathspecs)
git_reset_from_annotated int git_reset_from_annotated(git_repository *repo, const git_annotated_commit *commit, git_reset_t reset_type, const git_checkout_options *checkout_opts)
git_revert int git_revert(git_repository *repo, git_commit *commit, const git_revert_options *given_opts)
git_revert_commit int git_revert_commit(git_index **out, git_repository *repo, git_commit *revert_commit, git_commit *our_commit, unsigned int mainline, const git_merge_options *merge_options)
git_revert_init_options int git_revert_init_options(git_revert_options *opts, unsigned int version)
git_revert_options_init int git_revert_options_init(git_revert_options *opts, unsigned int version)
git_revparse int git_revparse(git_revspec *revspec, git_repository *repo, const char *spec)
git_revparse_ext int git_revparse_ext(git_object **object_out, git_reference **reference_out, git_repository *repo, const char *spec)
git_revparse_single int git_revparse_single(git_object **out, git_repository *repo, const char *spec)
git_revwalk_add_hide_cb int git_revwalk_add_hide_cb(git_revwalk *walk, git_revwalk_hide_cb hide_cb, void *payload)
git_revwalk_free void git_revwalk_free(git_revwalk *walk)
git_revwalk_hide int git_revwalk_hide(git_revwalk *walk, const git_oid *commit_id)
git_revwalk_hide_glob int git_revwalk_hide_glob(git_revwalk *walk, const char *glob)
git_revwalk_hide_head int git_revwalk_hide_head(git_revwalk *walk)
git_revwalk_hide_ref int git_revwalk_hide_ref(git_revwalk *walk, const char *refname)
git_revwalk_new int git_revwalk_new(git_revwalk **out, git_repository *repo)
git_revwalk_next int git_revwalk_next(git_oid *out, git_revwalk *walk)
git_revwalk_push int git_revwalk_push(git_revwalk *walk, const git_oid *id)
git_revwalk_push_glob int git_revwalk_push_glob(git_revwalk *walk, const char *glob)
git_revwalk_push_head int git_revwalk_push_head(git_revwalk *walk)
git_revwalk_push_range int git_revwalk_push_range(git_revwalk *walk, const char *range)
git_revwalk_push_ref int git_revwalk_push_ref(git_revwalk *walk, const char *refname)
git_revwalk_repository git_repository * git_revwalk_repository(git_revwalk *walk)
git_revwalk_reset int git_revwalk_reset(git_revwalk *walker)
git_revwalk_simplify_first_parent int git_revwalk_simplify_first_parent(git_revwalk *walk)
git_revwalk_sorting int git_revwalk_sorting(git_revwalk *walk, unsigned int sort_mode)
git_signature_default int git_signature_default(git_signature **out, git_repository *repo)
git_signature_dup int git_signature_dup(git_signature **dest, const git_signature *sig)
git_signature_free void git_signature_free(git_signature *sig)
git_signature_from_buffer int git_signature_from_buffer(git_signature **out, const char *buf)
git_signature_new int git_signature_new(git_signature **out, const char *name, const char *email, git_time_t time, int offset)
git_signature_now int git_signature_now(git_signature **out, const char *name, const char *email)
git_smart_subtransport_git int git_smart_subtransport_git(git_smart_subtransport **out, git_transport *owner, void *param)
git_smart_subtransport_http int git_smart_subtransport_http(git_smart_subtransport **out, git_transport *owner, void *param)
git_smart_subtransport_ssh int git_smart_subtransport_ssh(git_smart_subtransport **out, git_transport *owner, void *param)
git_stash_apply int git_stash_apply(git_repository *repo, size_t index, const git_stash_apply_options *options)
git_stash_apply_init_options int git_stash_apply_init_options(git_stash_apply_options *opts, unsigned int version)
git_stash_apply_options_init int git_stash_apply_options_init(git_stash_apply_options *opts, unsigned int version)
git_stash_drop int git_stash_drop(git_repository *repo, size_t index)
git_stash_foreach int git_stash_foreach(git_repository *repo, git_stash_cb callback, void *payload)
git_stash_pop int git_stash_pop(git_repository *repo, size_t index, const git_stash_apply_options *options)
git_stash_save int git_stash_save(git_oid *out, git_repository *repo, const git_signature *stasher, const char *message, uint32_t flags)
git_status_byindex const git_status_entry * git_status_byindex(git_status_list *statuslist, size_t idx)
git_status_file int git_status_file(unsigned int *status_flags, git_repository *repo, const char *path)
git_status_foreach int git_status_foreach(git_repository *repo, git_status_cb callback, void *payload)
git_status_foreach_ext int git_status_foreach_ext(git_repository *repo, const git_status_options *opts, git_status_cb callback, void *payload)
git_status_init_options int git_status_init_options(git_status_options *opts, unsigned int version)
git_status_list_entrycount size_t git_status_list_entrycount(git_status_list *statuslist)
git_status_list_free void git_status_list_free(git_status_list *statuslist)
git_status_list_get_perfdata int git_status_list_get_perfdata(git_diff_perfdata *out, const git_status_list *status)
git_status_list_new int git_status_list_new(git_status_list **out, git_repository *repo, const git_status_options *opts)
git_status_options_init int git_status_options_init(git_status_options *opts, unsigned int version)
git_status_should_ignore int git_status_should_ignore(int *ignored, git_repository *repo, const char *path)
git_strarray_copy int git_strarray_copy(git_strarray *tgt, const git_strarray *src)
git_strarray_copy int git_strarray_copy(git_strarray *tgt, const git_strarray *src)
git_strarray_dispose void git_strarray_dispose(git_strarray *array)
git_strarray_free void git_strarray_free(git_strarray *array)
git_stream_register int git_stream_register(git_stream_t type, git_stream_registration *registration)
git_stream_register_tls int git_stream_register_tls(git_stream_cb ctor)
git_submodule_add_finalize int git_submodule_add_finalize(git_submodule *submodule)
git_submodule_add_setup int git_submodule_add_setup(git_submodule **out, git_repository *repo, const char *url, const char *path, int use_gitlink)
git_submodule_add_to_index int git_submodule_add_to_index(git_submodule *submodule, int write_index)
git_submodule_branch const char * git_submodule_branch(git_submodule *submodule)
git_submodule_clone int git_submodule_clone(git_repository **out, git_submodule *submodule, const git_submodule_update_options *opts)
git_submodule_fetch_recurse_submodules git_submodule_recurse_t git_submodule_fetch_recurse_submodules(git_submodule *submodule)
git_submodule_foreach int git_submodule_foreach(git_repository *repo, git_submodule_cb callback, void *payload)
git_submodule_free void git_submodule_free(git_submodule *submodule)
git_submodule_head_id const git_oid * git_submodule_head_id(git_submodule *submodule)
git_submodule_ignore git_submodule_ignore_t git_submodule_ignore(git_submodule *submodule)
git_submodule_index_id const git_oid * git_submodule_index_id(git_submodule *submodule)
git_submodule_init int git_submodule_init(git_submodule *submodule, int overwrite)
git_submodule_location int git_submodule_location(unsigned int *location_status, git_submodule *submodule)
git_submodule_lookup int git_submodule_lookup(git_submodule **out, git_repository *repo, const char *name)
git_submodule_name const char * git_submodule_name(git_submodule *submodule)
git_submodule_open int git_submodule_open(git_repository **repo, git_submodule *submodule)
git_submodule_owner git_repository * git_submodule_owner(git_submodule *submodule)
git_submodule_path const char * git_submodule_path(git_submodule *submodule)
git_submodule_reload int git_submodule_reload(git_submodule *submodule, int force)
git_submodule_repo_init int git_submodule_repo_init(git_repository **out, const git_submodule *sm, int use_gitlink)
git_submodule_resolve_url int git_submodule_resolve_url(git_buf *out, git_repository *repo, const char *url)
git_submodule_set_branch int git_submodule_set_branch(git_repository *repo, const char *name, const char *branch)
git_submodule_set_fetch_recurse_submodules int git_submodule_set_fetch_recurse_submodules(git_repository *repo, const char *name, git_submodule_recurse_t fetch_recurse_submodules)
git_submodule_set_ignore int git_submodule_set_ignore(git_repository *repo, const char *name, git_submodule_ignore_t ignore)
git_submodule_set_update int git_submodule_set_update(git_repository *repo, const char *name, git_submodule_update_t update)
git_submodule_set_url int git_submodule_set_url(git_repository *repo, const char *name, const char *url)
git_submodule_status int git_submodule_status(unsigned int *status, git_repository *repo, const char *name, git_submodule_ignore_t ignore)
git_submodule_sync int git_submodule_sync(git_submodule *submodule)
git_submodule_update int git_submodule_update(git_submodule *submodule, int init, git_submodule_update_options *options)
git_submodule_update_init_options int git_submodule_update_init_options(git_submodule_update_options *opts, unsigned int version)
git_submodule_update_options_init int git_submodule_update_options_init(git_submodule_update_options *opts, unsigned int version)
git_submodule_update_strategy git_submodule_update_t git_submodule_update_strategy(git_submodule *submodule)
git_submodule_url const char * git_submodule_url(git_submodule *submodule)
git_submodule_wd_id const git_oid * git_submodule_wd_id(git_submodule *submodule)
git_tag_annotation_create int git_tag_annotation_create(git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, const git_signature *tagger, const char *message)
git_tag_create int git_tag_create(git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, const git_signature *tagger, const char *message, int force)
git_tag_create_from_buffer int git_tag_create_from_buffer(git_oid *oid, git_repository *repo, const char *buffer, int force)
git_tag_create_frombuffer int git_tag_create_frombuffer(git_oid *oid, git_repository *repo, const char *buffer, int force)
git_tag_create_lightweight int git_tag_create_lightweight(git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, int force)
git_tag_delete int git_tag_delete(git_repository *repo, const char *tag_name)
git_tag_dup int git_tag_dup(git_tag **out, git_tag *source)
git_tag_foreach int git_tag_foreach(git_repository *repo, git_tag_foreach_cb callback, void *payload)
git_tag_free void git_tag_free(git_tag *tag)
git_tag_id const git_oid * git_tag_id(const git_tag *tag)
git_tag_list int git_tag_list(git_strarray *tag_names, git_repository *repo)
git_tag_list_match int git_tag_list_match(git_strarray *tag_names, const char *pattern, git_repository *repo)
git_tag_lookup int git_tag_lookup(git_tag **out, git_repository *repo, const git_oid *id)
git_tag_lookup_prefix int git_tag_lookup_prefix(git_tag **out, git_repository *repo, const git_oid *id, size_t len)
git_tag_message const char * git_tag_message(const git_tag *tag)
git_tag_name const char * git_tag_name(const git_tag *tag)
git_tag_owner git_repository * git_tag_owner(const git_tag *tag)
git_tag_peel int git_tag_peel(git_object **tag_target_out, const git_tag *tag)
git_tag_tagger const git_signature * git_tag_tagger(const git_tag *tag)
git_tag_target int git_tag_target(git_object **target_out, const git_tag *tag)
git_tag_target_id const git_oid * git_tag_target_id(const git_tag *tag)
git_tag_target_type git_object_t git_tag_target_type(const git_tag *tag)
git_trace_set int git_trace_set(git_trace_level_t level, git_trace_cb cb)
git_transaction_commit int git_transaction_commit(git_transaction *tx)
git_transaction_free void git_transaction_free(git_transaction *tx)
git_transaction_lock_ref int git_transaction_lock_ref(git_transaction *tx, const char *refname)
git_transaction_new int git_transaction_new(git_transaction **out, git_repository *repo)
git_transaction_remove int git_transaction_remove(git_transaction *tx, const char *refname)
git_transaction_set_reflog int git_transaction_set_reflog(git_transaction *tx, const char *refname, const git_reflog *reflog)
git_transaction_set_symbolic_target int git_transaction_set_symbolic_target(git_transaction *tx, const char *refname, const char *target, const git_signature *sig, const char *msg)
git_transaction_set_target int git_transaction_set_target(git_transaction *tx, const char *refname, const git_oid *target, const git_signature *sig, const char *msg)
git_transport_dummy int git_transport_dummy(git_transport **out, git_remote *owner, /* NULL */ void *payload)
git_transport_init int git_transport_init(git_transport *opts, unsigned int version)
git_transport_local int git_transport_local(git_transport **out, git_remote *owner, /* NULL */ void *payload)
git_transport_new int git_transport_new(git_transport **out, git_remote *owner, const char *url)
git_transport_register int git_transport_register(const char *prefix, git_transport_cb cb, void *param)
git_transport_smart int git_transport_smart(git_transport **out, git_remote *owner, /* (git_smart_subtransport_definition *)
git_transport_smart_certificate_check int git_transport_smart_certificate_check(git_transport *transport, git_cert *cert, int valid, const char *hostname)
git_transport_smart_credentials int git_transport_smart_credentials(git_credential **out, git_transport *transport, const char *user, int methods)
git_transport_smart_proxy_options int git_transport_smart_proxy_options(git_proxy_options *out, git_transport *transport)
git_transport_ssh_with_paths int git_transport_ssh_with_paths(git_transport **out, git_remote *owner, void *payload)
git_transport_unregister int git_transport_unregister(const char *prefix)
git_tree_create_updated int git_tree_create_updated(git_oid *out, git_repository *repo, git_tree *baseline, size_t nupdates, const git_tree_update *updates)
git_tree_dup int git_tree_dup(git_tree **out, git_tree *source)
git_tree_entry_byid const git_tree_entry * git_tree_entry_byid(const git_tree *tree, const git_oid *id)
git_tree_entry_byindex const git_tree_entry * git_tree_entry_byindex(const git_tree *tree, size_t idx)
git_tree_entry_byname const git_tree_entry * git_tree_entry_byname(const git_tree *tree, const char *filename)
git_tree_entry_bypath int git_tree_entry_bypath(git_tree_entry **out, const git_tree *root, const char *path)
git_tree_entry_cmp int git_tree_entry_cmp(const git_tree_entry *e1, const git_tree_entry *e2)
git_tree_entry_dup int git_tree_entry_dup(git_tree_entry **dest, const git_tree_entry *source)
git_tree_entry_filemode git_filemode_t git_tree_entry_filemode(const git_tree_entry *entry)
git_tree_entry_filemode_raw git_filemode_t git_tree_entry_filemode_raw(const git_tree_entry *entry)
git_tree_entry_free void git_tree_entry_free(git_tree_entry *entry)
git_tree_entry_id const git_oid * git_tree_entry_id(const git_tree_entry *entry)
git_tree_entry_name const char * git_tree_entry_name(const git_tree_entry *entry)
git_tree_entry_to_object int git_tree_entry_to_object(git_object **object_out, git_repository *repo, const git_tree_entry *entry)
git_tree_entry_type git_object_t git_tree_entry_type(const git_tree_entry *entry)
git_tree_entrycount size_t git_tree_entrycount(const git_tree *tree)
git_tree_free void git_tree_free(git_tree *tree)
git_tree_id const git_oid * git_tree_id(const git_tree *tree)
git_tree_lookup int git_tree_lookup(git_tree **out, git_repository *repo, const git_oid *id)
git_tree_lookup_prefix int git_tree_lookup_prefix(git_tree **out, git_repository *repo, const git_oid *id, size_t len)
git_tree_owner git_repository * git_tree_owner(const git_tree *tree)
git_tree_walk int git_tree_walk(const git_tree *tree, git_treewalk_mode mode, git_treewalk_cb callback, void *payload)
git_treebuilder_clear int git_treebuilder_clear(git_treebuilder *bld)
git_treebuilder_entrycount size_t git_treebuilder_entrycount(git_treebuilder *bld)
git_treebuilder_filter int git_treebuilder_filter(git_treebuilder *bld, git_treebuilder_filter_cb filter, void *payload)
git_treebuilder_free void git_treebuilder_free(git_treebuilder *bld)
git_treebuilder_get const git_tree_entry * git_treebuilder_get(git_treebuilder *bld, const char *filename)
git_treebuilder_insert int git_treebuilder_insert(const git_tree_entry **out, git_treebuilder *bld, const char *filename, const git_oid *id, git_filemode_t filemode)
git_treebuilder_new int git_treebuilder_new(git_treebuilder **out, git_repository *repo, const git_tree *source)
git_treebuilder_remove int git_treebuilder_remove(git_treebuilder *bld, const char *filename)
git_treebuilder_write int git_treebuilder_write(git_oid *id, git_treebuilder *bld)
git_treebuilder_write_with_buffer int git_treebuilder_write_with_buffer(git_oid *oid, git_treebuilder *bld, git_buf *tree)
git_win32__crtdbg_stacktrace__dump int git_win32__crtdbg_stacktrace__dump(git_win32__crtdbg_stacktrace_options opt, const char *label)
git_win32__stack__set_aux_cb int git_win32__stack__set_aux_cb(git_win32__stack__aux_cb_alloc cb_alloc, git_win32__stack__aux_cb_lookup cb_lookup)
git_worktree_add int git_worktree_add(git_worktree **out, git_repository *repo, const char *name, const char *path, const git_worktree_add_options *opts)
git_worktree_add_init_options int git_worktree_add_init_options(git_worktree_add_options *opts, unsigned int version)
git_worktree_add_options_init int git_worktree_add_options_init(git_worktree_add_options *opts, unsigned int version)
git_worktree_free void git_worktree_free(git_worktree *wt)
git_worktree_is_locked int git_worktree_is_locked(git_buf *reason, const git_worktree *wt)
git_worktree_is_prunable int git_worktree_is_prunable(git_worktree *wt, git_worktree_prune_options *opts)
git_worktree_list int git_worktree_list(git_strarray *out, git_repository *repo)
git_worktree_lock int git_worktree_lock(git_worktree *wt, const char *reason)
git_worktree_lookup int git_worktree_lookup(git_worktree **out, git_repository *repo, const char *name)
git_worktree_name const char * git_worktree_name(const git_worktree *wt)
git_worktree_open_from_repository int git_worktree_open_from_repository(git_worktree **out, git_repository *repo)
git_worktree_path const char * git_worktree_path(const git_worktree *wt)
git_worktree_prune int git_worktree_prune(git_worktree *wt, git_worktree_prune_options *opts)
git_worktree_prune_init_options int git_worktree_prune_init_options(git_worktree_prune_options *opts, unsigned int version)
git_worktree_prune_options_init int git_worktree_prune_options_init(git_worktree_prune_options *opts, unsigned int version)
git_worktree_unlock int git_worktree_unlock(git_worktree *wt)
git_worktree_validate int git_worktree_validate(const git_worktree *wt)
giterr_clear void giterr_clear(void)
giterr_last const git_error * giterr_last(void)
giterr_set_oom void giterr_set_oom(void)
giterr_set_str void giterr_set_str(int error_class, const char *string)
